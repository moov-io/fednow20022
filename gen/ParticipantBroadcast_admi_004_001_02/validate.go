// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:admi.004.001.02
package ParticipantBroadcast_admi_004_001_02

import (
	"github.com/moov-io/base"
	"github.com/moov-io/fednow20022/pkg/fednow"
)

// XSD Element validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	fednow.AddError(&errs, baseName+".SysEvtNtfctn", v.SysEvtNtfctn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v Event21) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Event21"
	fednow.AddError(&errs, baseName+".EvtCd", v.EvtCd.Validate())
	if v.EvtParam != nil {
		fednow.AddError(&errs, baseName+".EvtParam", v.EvtParam.Validate())
	}
	fednow.AddError(&errs, baseName+".EvtTm", v.EvtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SystemEventNotificationV02) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SystemEventNotificationV02"
	fednow.AddError(&errs, baseName+".EvtInf", v.EvtInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v ConnectionIdentifierFedNow1) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[A-Z0-9]{7,9}`); err != nil {
		return err
	}
	return nil
}

func (v EventFedNow1) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "FPOF", "FPON", "PING", "FPCD", "FPCR"); err != nil {
		return err
	}
	return nil
}
