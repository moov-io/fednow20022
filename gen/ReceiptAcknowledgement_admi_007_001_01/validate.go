// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:admi.007.001.01
package ReceiptAcknowledgement_admi_007_001_01

import (
	"github.com/moov-io/base"
	"github.com/moov-io/fednow20022/pkg/fednow"
)

// XSD Element validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	fednow.AddError(&errs, baseName+".RctAck", v.RctAck.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v MessageHeader101) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "MessageHeader101"
	fednow.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	fednow.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v MessageReference11) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "MessageReference11"
	fednow.AddError(&errs, baseName+".Ref", v.Ref.Validate())
	fednow.AddError(&errs, baseName+".MsgNm", v.MsgNm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReceiptAcknowledgementReport21) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReceiptAcknowledgementReport21"
	fednow.AddError(&errs, baseName+".RltdRef", v.RltdRef.Validate())
	fednow.AddError(&errs, baseName+".ReqHdlg", v.ReqHdlg.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReceiptAcknowledgementV01) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReceiptAcknowledgementV01"
	fednow.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	fednow.AddError(&errs, baseName+".Rpt", v.Rpt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RequestHandling21) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RequestHandling21"
	fednow.AddError(&errs, baseName+".StsCd", v.StsCd.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v Max35Text) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v MessageHandlingFedNow1) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "TS01", "TS02"); err != nil {
		return err
	}
	return nil
}

func (v MessageNameIdentificationFRS1) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[a-z]{4,4}[.]{1,1}[0-9]{3,3}[.]{1,1}001[.]{1,1}[0-9]{2,2}`); err != nil {
		return err
	}
	if err := fednow.ValidateLength(string(v), 15); err != nil {
		return err
	}
	return nil
}
