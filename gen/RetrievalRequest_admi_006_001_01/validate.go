// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:admi.006.001.01
package RetrievalRequest_admi_006_001_01

import (
	"github.com/moov-io/base"
	"github.com/moov-io/fednow20022/pkg/fednow"
)

// XSD Element validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	fednow.AddError(&errs, baseName+".RsndReq", v.RsndReq.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v GenericIdentification361) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericIdentification361"
	fednow.AddError(&errs, baseName+".Id", v.Id.Validate())
	fednow.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v MessageHeader71) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "MessageHeader71"
	fednow.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	fednow.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification120Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PartyIdentification120Choice1"
	if v.PrtryId != nil {
		fednow.AddError(&errs, baseName+".PrtryId", v.PrtryId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification1361) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PartyIdentification1361"
	fednow.AddError(&errs, baseName+".Id", v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ResendRequestV01) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ResendRequestV01"
	fednow.AddError(&errs, baseName+".MsgHdr", v.MsgHdr.Validate())
	for indx := range v.RsndSchCrit {
		fednow.AddError(&errs, baseName+".RsndSchCrit", v.RsndSchCrit[indx].Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ResendSearchCriteria21) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ResendSearchCriteria21"
	fednow.AddError(&errs, baseName+".BizDt", v.BizDt.Validate())
	fednow.AddError(&errs, baseName+".OrgnlMsgNmId", v.OrgnlMsgNmId.Validate())
	fednow.AddError(&errs, baseName+".FileRef", v.FileRef.Validate())
	fednow.AddError(&errs, baseName+".Rcpt", v.Rcpt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v ConnectionPartyIdentifierFedNow1) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[A-Z0-9]{9,9}`); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max35TextFixed) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "NA"); err != nil {
		return err
	}
	return nil
}

func (v MessageIdentificationFedNow1) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[0-9]{8,8}[a-zA-Z0-9]{9,9}[a-zA-Z0-9]{1,18}`); err != nil {
		return err
	}
	if err := fednow.ValidateMinLength(string(v), 18); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v MessageNameIdentificationFRS1) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[a-z]{4,4}[.]{1,1}[0-9]{3,3}[.]{1,1}001[.]{1,1}[0-9]{2,2}`); err != nil {
		return err
	}
	if err := fednow.ValidateLength(string(v), 15); err != nil {
		return err
	}
	return nil
}
