// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
{{- $targetNS := .TargetNamespace }}
{{- $nsPrefix := .Xmlns.PrefixByUri .TargetNamespace }}
{{- $allXmlns := .Xmlns }}
// Models for {{ $targetNS }}{{ if ne $nsPrefix "" }} with prefix '{{ $nsPrefix }}'{{ end }}
package {{ .GoPackageName }}

import (
	"fmt"

	"github.com/moov-io/fednow20022/pkg/fednow"
	{{- range .GoImportsNeeded }}
		"{{ . }}"
	{{- end }}
)

{{ range .ExportableElements }}
	{{ $elemLen := len .Elements }}{{ if and (gt $elemLen 0) (ne $nsPrefix "") }}
		// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
		func (v {{ .GoName }}) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
			{{- if .Attributes }}
				var attr = []xml.Attr{}
				{{- range .Attributes }}
				{{ if eq .Use "optional" }}if v.{{ .GoName }} != nil { {{ end }}
					attr = append(attr, xml.Attr{Name: xml.Name{Local: "{{ .XmlName }}"}, Value: {{ if eq .Use "optional" }}*{{ end }}v.{{ .GoName }}},)
				{{ if eq .Use "optional" }} } {{ end }}
				{{- end }}
				e.EncodeToken(xml.StartElement{
					Name: xml.Name{Local: start.Name.Local},
					Attr: attr,
				})
			{{- else }}
				e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
			{{- end }}
			{{- range .Elements }}
				e.EncodeElement(v.{{ .GoFieldName }}, xml.StartElement{Name: xml.Name{Local: "{{ $nsPrefix }}:{{ .Name }}"}})
			{{- end }}
			e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
			return nil
		}
	{{ end }}

	{{ if eq .GoName "Message" }}
		{{- range $allXmlns }}
			{{- if and (ne .Prefix "xs") (ne .Prefix "gefeg") (ne .Prefix "head") }}
				{{- $l := len .Uri }}
				{{- $l1 := len (slice (printf "%*s" $l "") 15) }}
				{{- $l2 := len (slice (printf "%*s" $l "") 11) }}
				{{- $l3 := len (slice (printf "%*s" $l "") 10) }}
				{{- $l4 := len (slice (printf "%*s" $l "") 7) }}
				func New{{ title (slice .Uri $l1 $l2) }}{{ slice .Uri $l3 $l4 }}Message() *Message {
					message := &Message{}
					message.Xmlns = append(message.Xmlns, xml.Attr{
						Name: xml.Name{Local: "xmlns"},
		                        	Value: "urn:fednow",
					})
					message.Xmlns = append(message.Xmlns, xml.Attr{
						Name: xml.Name{Local: "xmlns:head"},
						Value: "urn:iso:std:iso:20022:tech:xsd:head.001.001.01",
					})
					message.Xmlns = append(message.Xmlns, xml.Attr{
		                                Name: xml.Name{
			                                Local: fmt.Sprintf("xmlns:%s", NamespacePrefixMap["{{ .Uri }}"]),
		                                },
		                                Value: "{{ .Uri }}",
					})
					return message
				}
			{{ end }}
		{{- end }}
	{{ end }}
{{ end }}

{{ range .ExportableComplexTypes }}
	{{ if eq .GoName "SignatureEnvelope" }}
		{{ template "SignatureEnvelope" . }}
	{{ else if eq .GoName "HdrAndData" }}
	{{ else if eq .GoName "HdrAndDataTCH" }}
	{{ else if eq .GoName "Document" }}
	{{ else }}
		{{ $elemLen := len .Elements }}{{ if and (gt $elemLen 0) (ne $nsPrefix "") }}
			// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
			func (v {{ .GoName }}) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
				{{- if .Attributes }}
					var attr = []xml.Attr{}
					{{- range .Attributes }}
					{{ if eq .Use "optional" }}if v.{{ .GoName }} != nil { {{ end }}
						attr = append(attr, xml.Attr{Name: xml.Name{Local: "{{ .XmlName }}"}, Value: {{ if eq .Use "optional" }}*{{ end }}v.{{ .GoName }}},)
					{{ if eq .Use "optional" }} } {{ end }}
					{{- end }}
					e.EncodeToken(xml.StartElement{
						Name: xml.Name{Local: start.Name.Local},
						Attr: attr,
					})
				{{- else }}
					e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
				{{- end }}
				{{- range .Elements }}
					e.EncodeElement(v.{{ .GoFieldName }}, xml.StartElement{Name: xml.Name{Local: "{{ $nsPrefix }}:{{ .Name }}"}})
				{{- end }}
				e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
				return nil
			}
		{{ end }}
	{{ end }}
{{ end }}

{{ range .ExportableSimpleTypes }}
	{{ if eq .GoName "ActiveCurrencyAndAmountSimpleType" }}
		{{ template "ActiveCurrencyAndAmountSimpleType" . }}
	{{ else if eq .GoName "ActiveOrHistoricCurrencyAndAmountSimpleType" }}
		{{ template "ActiveOrHistoricCurrencyAndAmountSimpleType" . }}
	{{ else if eq .GoName "ISODate" }}
	{{ else if eq .GoName "ISODateTime" }}
	{{ else if eq .GoName "ISONormalisedDateTime" }}
	{{ else if eq .GoName "Max20000Text" }}
	{{ end }}
{{ end }}

{{ define "ActiveCurrencyAndAmountSimpleType" }}
	func (a ActiveCurrencyAndAmountSimpleType) MarshalText() ([]byte, error) {
		return fednow.Amount(a).MarshalText()
	}
{{ end }}

{{ define "ActiveOrHistoricCurrencyAndAmountSimpleType" }}
	func (a ActiveOrHistoricCurrencyAndAmountSimpleType) MarshalText() ([]byte, error) {
		return fednow.Amount(a).MarshalText()
	}
{{ end }}

{{ define "SignatureEnvelope" }}
	// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
	func (v Sgntr) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
		e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
		e.EncodeElement(v.Signature, xml.StartElement{Name: xml.Name{Local: "ds:Signature"}})
		e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
		return nil
	}
{{ end }}
