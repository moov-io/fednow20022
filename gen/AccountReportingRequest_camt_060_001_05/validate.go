// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:camt.060.001.05
package AccountReportingRequest_camt_060_001_05

import (
	"github.com/moov-io/base"
	"github.com/moov-io/fednow20022/pkg/fednow"
)

// XSD Element validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	fednow.AddError(&errs, baseName+".AcctRptgReq", v.AcctRptgReq.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v AccountIdentification4Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AccountIdentification4Choice1"
	if v.Othr != nil {
		fednow.AddError(&errs, baseName+".Othr", v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AccountReportingRequestV05) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AccountReportingRequestV05"
	fednow.AddError(&errs, baseName+".GrpHdr", v.GrpHdr.Validate())
	fednow.AddError(&errs, baseName+".RptgReq", v.RptgReq.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification61) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification61"
	fednow.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAccount381) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashAccount381"
	fednow.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.Tp != nil {
		fednow.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAccountType2Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashAccountType2Choice1"
	if v.Prtry != nil {
		fednow.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification21) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification21"
	fednow.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DatePeriodDetails11) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DatePeriodDetails11"
	fednow.AddError(&errs, baseName+".FrDt", v.FrDt.Validate())
	fednow.AddError(&errs, baseName+".ToDt", v.ToDt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification181) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification181"
	fednow.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericAccountIdentification11) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericAccountIdentification11"
	fednow.AddError(&errs, baseName+".Id", v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GroupHeader771) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GroupHeader771"
	fednow.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	fednow.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party40Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party40Choice1"
	if v.Agt != nil {
		fednow.AddError(&errs, baseName+".Agt", v.Agt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReportingPeriod21) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReportingPeriod21"
	fednow.AddError(&errs, baseName+".FrToDt", v.FrToDt.Validate())
	fednow.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReportingRequest51) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReportingRequest51"
	fednow.AddError(&errs, baseName+".Id", v.Id.Validate())
	fednow.AddError(&errs, baseName+".ReqdMsgNmId", v.ReqdMsgNmId.Validate())
	fednow.AddError(&errs, baseName+".Acct", v.Acct.Validate())
	fednow.AddError(&errs, baseName+".AcctOwnr", v.AcctOwnr.Validate())
	if v.RptgPrd != nil {
		fednow.AddError(&errs, baseName+".RptgPrd", v.RptgPrd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v AccountReportingFedNow1) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "ABAR", "AADR", "AATR", "CATR", "CADR", "IATR", "CITR"); err != nil {
		return err
	}
	return nil
}

func (v AccountTypeFRS1) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "S", "M"); err != nil {
		return err
	}
	return nil
}

func (v ConnectionPartyIdentifierFedNow1) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[A-Z0-9]{9,9}`); err != nil {
		return err
	}
	return nil
}

func (v MessageIdentificationFedNow1) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[0-9]{8,8}[a-zA-Z0-9]{9,9}[a-zA-Z0-9]{1,18}`); err != nil {
		return err
	}
	if err := fednow.ValidateMinLength(string(v), 18); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v MessageNameIdentificationFRS1) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[a-z]{4,4}[.]{1,1}[0-9]{3,3}[.]{1,1}001[.]{1,1}[0-9]{2,2}`); err != nil {
		return err
	}
	if err := fednow.ValidateLength(string(v), 15); err != nil {
		return err
	}
	return nil
}

func (v QueryType3Code1) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "ALLL"); err != nil {
		return err
	}
	return nil
}

func (v RoutingNumberFRS1) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[0-9]{9,9}`); err != nil {
		return err
	}
	return nil
}
