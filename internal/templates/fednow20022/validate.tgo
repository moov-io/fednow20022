// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
{{- $targetNS := .TargetNamespace }}
// Validations for {{ $targetNS }}
package {{ .GoPackageName }}

import (
	"fmt"
	"github.com/moov-io/base"
	"github.com/moov-io/fednow20022/pkg/fednow"
	{{- range .GoImportsNeeded }}
		"{{ . }}"
	{{- end }}
)

{{ if .ExportableElements -}}
	// XSD Element validations
{{ end -}}
{{ range .ExportableElements }}
	func (v {{ .GoName }}) Validate() error {
		var errs base.ErrorList = base.ErrorList{}
                {{- if or (gt (len .Attributes) 0) (gt (len .Elements) 0) }}
                baseName := "{{ .GoName }}"
                {{- end }}
		{{- range .Attributes }}
			{{ if eq .Use "optional" }}if v.{{ .GoName }} != nil { {{ end }}
				fednow.AddError(&errs, baseName+".{{ .GoName }}", v.{{ .GoName }}.Validate())
			{{ if eq .Use "optional" }} } {{ end }}
                {{- end }}
		{{- range .Elements }}
			{{ if eq .MinOccurs "0" }}if v.{{ .GoName }} != nil { {{ end }}
				{{- if eq .GoTypeName "SignatureEnvelope" -}}
				{{- else if .Array -}}
					for indx := range v.{{ .GoFieldName }} {
						fednow.AddError(&errs, baseName+".{{ .GoName }}", v.{{ .GoFieldName }}[indx].Validate())
					}
				{{- else -}}
					fednow.AddError(&errs, baseName+".{{ .GoName }}", v.{{ .GoFieldName }}.Validate())
				{{- end -}}
			{{ if eq .MinOccurs "0" }} } {{ end }}
		{{- end }}
		if errs.Empty() {
			return nil
		}
		return errs
	}
{{ end }}

{{ if .ExportableComplexTypes -}}
	// XSD ComplexType validations
{{ end }}
{{ range .ExportableComplexTypes }}
	{{ if eq .GoName "SignatureEnvelope" }}
	{{ else if eq .GoName "HdrAndData" }}
	{{ else if eq .GoName "HdrAndDataTCH" }}
	{{ else if eq .GoName "Document" }}
	{{ else }}
		func (v {{ .GoName }}) Validate() error {
			var errs base.ErrorList = base.ErrorList{}
                        {{- if or (gt (len .Attributes) 0) (gt (len .Elements) 0) }}
                        baseName := "{{ .GoName }}"
                        {{- end }}
			{{- range .Attributes }}
				{{ if eq .Use "optional" }}if v.{{ .GoName }} != nil { {{ end }}
					fednow.AddError(&errs, baseName+".{{ .GoName }}", v.{{ .GoName }}.Validate())
				{{ if eq .Use "optional" }} } {{ end }}
			{{- end }}
			{{- range .Elements }}
				{{ if eq .MinOccurs "0" }}if v.{{ .GoName }} != nil { {{ end }}
					{{- if eq .GoTypeName "SignatureEnvelope" -}}
					{{- else if .Array -}}
						for indx := range v.{{ .GoFieldName }} {
							fednow.AddError(&errs, baseName+".{{ .GoName }}", v.{{ .GoFieldName }}[indx].Validate())
						}
					{{- else -}}
						fednow.AddError(&errs, baseName+".{{ .GoName }}", v.{{ .GoFieldName }}.Validate())
					{{- end -}}
				{{ if eq .MinOccurs "0" }} } {{ end }}
			{{- end }}
			if errs.Empty() {
				return nil
			}
			return errs
		}
	{{ end }}
{{ end }}

{{ if .ExportableSimpleTypes -}}
	// XSD SimpleType validations
{{ end }}
{{ range .ExportableSimpleTypes }}
	{{ if eq .GoName "ActiveCurrencyAndAmountSimpleType" }}
	{{ else if eq .GoName "ActiveOrHistoricCurrencyAndAmountSimpleType" }}
	{{ else if eq .GoName "ISODate" }}
	{{ else if eq .GoName "ISODateTime" }}
	{{ else if eq .GoName "ISONormalisedDateTime" }}
	{{ else if eq .GoName "Max20000Text" }}
	{{ else }}
		func (v {{ .GoName }}) Validate() error {
			{{- if .Restriction.Pattern }}
				if err := fednow.ValidatePattern(string(v), `{{ .Restriction.Pattern.Value }}`); err != nil {
                                	return err
                                }
			{{- end }}
			{{- if .Restriction.Enums }}
				if err := fednow.ValidateEnumeration(string(v), {{ range .Restriction.Enums }}"{{ .Value }}", {{ end }}); err != nil {
                                	return err
                                }
			{{- end }}
			{{- if .Restriction.MinInclusive }}
				if err := fednow.ValidateMinInclusive({{ .GoTypeName }}(v), {{ .Restriction.MinInclusive.Value }}); err != nil {
                                	return err
                                }
			{{- end }}
			{{- if .Restriction.MaxInclusive }}
				if err := fednow.ValidateMaxInclusive({{ .GoTypeName }}(v), {{ .Restriction.MaxInclusive.Value }}); err != nil {
                                	return err
                                }
			{{- end }}
			{{- if .Restriction.MinExclusive }}
				if err := fednow.ValidateMinExclusive({{ .GoTypeName }}(v), {{ .Restriction.MinExclusive.Value }}); err != nil {
                                	return err
                                }
			{{- end }}
			{{- if .Restriction.MaxExclusive }}
				if err := fednow.ValidateMaxExclusive({{ .GoTypeName }}(v), {{ .Restriction.MaxExclusive.Value }}); err != nil {
                                	return err
                                }
			{{- end }}
			{{- if .Restriction.FractionDigits }}
				if err := fednow.ValidateFractionDigits(fmt.Sprintf("%v", v), {{ .Restriction.FractionDigits.Value }}); err != nil {
                                	return err
                                }
			{{- end }}
			{{- if .Restriction.TotalDigits }}
				if err := fednow.ValidateTotalDigits(fmt.Sprintf("%v", v), {{ .Restriction.TotalDigits.Value }}); err != nil {
                                	return err
                                }
			{{- end }}
			{{- if .Restriction.Length }}
				if err := fednow.ValidateLength(string(v), {{ .Restriction.Length.Value }}); err != nil {
                                	return err
                                }
			{{- end }}
			{{- if .Restriction.MinLength }}
				if err := fednow.ValidateMinLength(string(v), {{ .Restriction.MinLength.Value }}); err != nil {
                                	return err
                                }
			{{- end }}
			{{- if .Restriction.MaxLength }}
				if err := fednow.ValidateMaxLength(string(v), {{ .Restriction.MaxLength.Value }}); err != nil {
                                	return err
                                }
			{{- end }}
			return nil
		}
	{{ end }}
{{ end }}
