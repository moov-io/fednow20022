// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:pacs.009.001.08
package FinancialInstitutionCreditTransfer_pacs_009_001_08

import (
	"fmt"

	"github.com/moov-io/base"
	"github.com/moov-io/fednow20022/pkg/fednow"
)

// XSD Element validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	fednow.AddError(&errs, baseName+".FICdtTrf", v.FICdtTrf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v ActiveCurrencyAndAmountFedNow1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ActiveCurrencyAndAmountFedNow1"

	fednow.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())

	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification61) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification61"
	fednow.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification62) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification62"
	fednow.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CategoryPurpose1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CategoryPurpose1Choice"
	if v.Cd != nil {
		fednow.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fednow.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemIdentification2Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemIdentification2Choice1"
	if v.Cd != nil {
		fednow.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemIdentification3Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemIdentification3Choice1"
	if v.Cd != nil {
		fednow.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification21) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification21"
	fednow.AddError(&errs, baseName+".ClrSysId", v.ClrSysId.Validate())
	fednow.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditTransferTransaction361) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditTransferTransaction361"
	fednow.AddError(&errs, baseName+".PmtId", v.PmtId.Validate())
	fednow.AddError(&errs, baseName+".PmtTpInf", v.PmtTpInf.Validate())
	fednow.AddError(&errs, baseName+".IntrBkSttlmAmt", v.IntrBkSttlmAmt.Validate())
	fednow.AddError(&errs, baseName+".IntrBkSttlmDt", v.IntrBkSttlmDt.Validate())
	fednow.AddError(&errs, baseName+".InstgAgt", v.InstgAgt.Validate())
	fednow.AddError(&errs, baseName+".InstdAgt", v.InstdAgt.Validate())
	fednow.AddError(&errs, baseName+".Dbtr", v.Dbtr.Validate())
	fednow.AddError(&errs, baseName+".Cdtr", v.Cdtr.Validate())
	if v.RmtInf != nil {
		fednow.AddError(&errs, baseName+".RmtInf", v.RmtInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionCreditTransferV08) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionCreditTransferV08"
	fednow.AddError(&errs, baseName+".GrpHdr", v.GrpHdr.Validate())
	fednow.AddError(&errs, baseName+".CdtTrfTxInf", v.CdtTrfTxInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification181) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification181"
	fednow.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification182) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification182"
	if v.BICFI != nil {
		fednow.AddError(&errs, baseName+".BICFI", v.BICFI.Validate())
	}
	fednow.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if v.LEI != nil {
		fednow.AddError(&errs, baseName+".LEI", v.LEI.Validate())
	}
	if v.Nm != nil {
		fednow.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PstlAdr != nil {
		fednow.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GroupHeader931) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GroupHeader931"
	fednow.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	fednow.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	fednow.AddError(&errs, baseName+".NbOfTxs", v.NbOfTxs.Validate())
	fednow.AddError(&errs, baseName+".SttlmInf", v.SttlmInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v LocalInstrument2Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "LocalInstrument2Choice1"
	if v.Prtry != nil {
		fednow.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentIdentification71) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentIdentification71"
	if v.InstrId != nil {
		fednow.AddError(&errs, baseName+".InstrId", v.InstrId.Validate())
	}
	fednow.AddError(&errs, baseName+".EndToEndId", v.EndToEndId.Validate())
	if v.TxId != nil {
		fednow.AddError(&errs, baseName+".TxId", v.TxId.Validate())
	}
	if v.UETR != nil {
		fednow.AddError(&errs, baseName+".UETR", v.UETR.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentTypeInformation281) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentTypeInformation281"
	if v.SvcLvl != nil {
		fednow.AddError(&errs, baseName+".SvcLvl", v.SvcLvl.Validate())
	}
	fednow.AddError(&errs, baseName+".LclInstrm", v.LclInstrm.Validate())
	if v.CtgyPurp != nil {
		fednow.AddError(&errs, baseName+".CtgyPurp", v.CtgyPurp.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PostalAddress241) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PostalAddress241"
	if v.Dept != nil {
		fednow.AddError(&errs, baseName+".Dept", v.Dept.Validate())
	}
	if v.SubDept != nil {
		fednow.AddError(&errs, baseName+".SubDept", v.SubDept.Validate())
	}
	if v.StrtNm != nil {
		fednow.AddError(&errs, baseName+".StrtNm", v.StrtNm.Validate())
	}
	if v.BldgNb != nil {
		fednow.AddError(&errs, baseName+".BldgNb", v.BldgNb.Validate())
	}
	if v.BldgNm != nil {
		fednow.AddError(&errs, baseName+".BldgNm", v.BldgNm.Validate())
	}
	if v.Flr != nil {
		fednow.AddError(&errs, baseName+".Flr", v.Flr.Validate())
	}
	if v.PstBx != nil {
		fednow.AddError(&errs, baseName+".PstBx", v.PstBx.Validate())
	}
	if v.Room != nil {
		fednow.AddError(&errs, baseName+".Room", v.Room.Validate())
	}
	fednow.AddError(&errs, baseName+".PstCd", v.PstCd.Validate())
	fednow.AddError(&errs, baseName+".TwnNm", v.TwnNm.Validate())
	if v.TwnLctnNm != nil {
		fednow.AddError(&errs, baseName+".TwnLctnNm", v.TwnLctnNm.Validate())
	}
	if v.DstrctNm != nil {
		fednow.AddError(&errs, baseName+".DstrctNm", v.DstrctNm.Validate())
	}
	fednow.AddError(&errs, baseName+".CtrySubDvsn", v.CtrySubDvsn.Validate())
	fednow.AddError(&errs, baseName+".Ctry", v.Ctry.Validate())
	if v.AdrLine != nil {
		fednow.AddError(&errs, baseName+".AdrLine", v.AdrLine.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceInformation21) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceInformation21"
	if v.Ustrd != nil {
		fednow.AddError(&errs, baseName+".Ustrd", v.Ustrd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ServiceLevel8Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ServiceLevel8Choice"
	if v.Cd != nil {
		fednow.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fednow.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SettlementInstruction71) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SettlementInstruction71"
	fednow.AddError(&errs, baseName+".SttlmMtd", v.SttlmMtd.Validate())
	fednow.AddError(&errs, baseName+".ClrSys", v.ClrSys.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v ActiveCurrencyAndAmountFedNow1SimpleType) Validate() error {
	if err := fednow.ValidateMinInclusive(float64(v), 0); err != nil {
		return err
	}
	if err := fednow.ValidateFractionDigits(fmt.Sprintf("%v", v), 2); err != nil {
		return err
	}
	if err := fednow.ValidateTotalDigits(fmt.Sprintf("%v", v), 14); err != nil {
		return err
	}
	return nil
}

func (v ActiveCurrencyCodeFixed) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "USD"); err != nil {
		return err
	}
	return nil
}

func (v BICFIDec2014Identifier) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}`); err != nil {
		return err
	}
	return nil
}

func (v CountryCode) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[A-Z]{2,2}`); err != nil {
		return err
	}
	return nil
}

func (v ExternalCashClearingSystem1CodeFixed) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "FDN"); err != nil {
		return err
	}
	return nil
}

func (v ExternalCategoryPurpose1Code) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalClearingSystemIdentification1CodeFixed) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "USABA"); err != nil {
		return err
	}
	return nil
}

func (v ExternalServiceLevel1Code) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v LEIIdentifier) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[A-Z0-9]{18,18}[0-9]{2,2}`); err != nil {
		return err
	}
	return nil
}

func (v Max140Text) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 140); err != nil {
		return err
	}
	return nil
}

func (v Max15NumericTextFixed) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "1"); err != nil {
		return err
	}
	return nil
}

func (v Max16Text) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 16); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max70Text) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 70); err != nil {
		return err
	}
	return nil
}

func (v MessageIdentificationFedNow1) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[0-9]{8,8}[a-zA-Z0-9]{9,9}[a-zA-Z0-9]{1,18}`); err != nil {
		return err
	}
	if err := fednow.ValidateMinLength(string(v), 18); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v RoutingNumberFRS1) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[0-9]{9,9}`); err != nil {
		return err
	}
	return nil
}

func (v SettlementMethod1Code1) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "CLRG"); err != nil {
		return err
	}
	return nil
}

func (v UUIDv4Identifier) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}`); err != nil {
		return err
	}
	return nil
}
