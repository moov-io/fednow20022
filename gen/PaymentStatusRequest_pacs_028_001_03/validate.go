// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:pacs.028.001.03
package PaymentStatusRequest_pacs_028_001_03

import (
	"github.com/moov-io/base"
	"github.com/moov-io/fednow20022/pkg/fednow"
)

// XSD Element validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	fednow.AddError(&errs, baseName+".FIToFIPmtStsReq", v.FIToFIPmtStsReq.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v BranchAndFinancialInstitutionIdentification61) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification61"
	fednow.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemIdentification2Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemIdentification2Choice1"
	if v.Cd != nil {
		fednow.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification21) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification21"
	fednow.AddError(&errs, baseName+".ClrSysId", v.ClrSysId.Validate())
	fednow.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FIToFIPaymentStatusRequestV03) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FIToFIPaymentStatusRequestV03"
	fednow.AddError(&errs, baseName+".GrpHdr", v.GrpHdr.Validate())
	fednow.AddError(&errs, baseName+".TxInf", v.TxInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification181) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification181"
	fednow.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GroupHeader911) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GroupHeader911"
	fednow.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	fednow.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OriginalGroupInformation291) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OriginalGroupInformation291"
	fednow.AddError(&errs, baseName+".OrgnlMsgId", v.OrgnlMsgId.Validate())
	fednow.AddError(&errs, baseName+".OrgnlMsgNmId", v.OrgnlMsgNmId.Validate())
	fednow.AddError(&errs, baseName+".OrgnlCreDtTm", v.OrgnlCreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentTransaction1131) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentTransaction1131"
	fednow.AddError(&errs, baseName+".OrgnlGrpInf", v.OrgnlGrpInf.Validate())
	if v.OrgnlInstrId != nil {
		fednow.AddError(&errs, baseName+".OrgnlInstrId", v.OrgnlInstrId.Validate())
	}
	if v.OrgnlEndToEndId != nil {
		fednow.AddError(&errs, baseName+".OrgnlEndToEndId", v.OrgnlEndToEndId.Validate())
	}
	if v.OrgnlTxId != nil {
		fednow.AddError(&errs, baseName+".OrgnlTxId", v.OrgnlTxId.Validate())
	}
	if v.OrgnlUETR != nil {
		fednow.AddError(&errs, baseName+".OrgnlUETR", v.OrgnlUETR.Validate())
	}
	fednow.AddError(&errs, baseName+".InstgAgt", v.InstgAgt.Validate())
	fednow.AddError(&errs, baseName+".InstdAgt", v.InstdAgt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v ExternalClearingSystemIdentification1CodeFixed) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "USABA"); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v MessageIdentificationFedNow1) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[0-9]{8,8}[a-zA-Z0-9]{9,9}[a-zA-Z0-9]{1,18}`); err != nil {
		return err
	}
	if err := fednow.ValidateMinLength(string(v), 18); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v MessageNameIdentificationFRS1) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[a-z]{4,4}[.]{1,1}[0-9]{3,3}[.]{1,1}001[.]{1,1}[0-9]{2,2}`); err != nil {
		return err
	}
	if err := fednow.ValidateLength(string(v), 15); err != nil {
		return err
	}
	return nil
}

func (v RoutingNumberFRS1) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[0-9]{9,9}`); err != nil {
		return err
	}
	return nil
}

func (v UUIDv4Identifier) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}`); err != nil {
		return err
	}
	return nil
}
