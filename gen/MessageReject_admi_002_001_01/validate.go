// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:admi.002.001.01
package MessageReject_admi_002_001_01

import (
	"github.com/moov-io/base"
	"github.com/moov-io/fednow20022/pkg/fednow"
)

// XSD Element validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	fednow.AddError(&errs, baseName+".Admi00200101", v.Admi00200101.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v MessageReference) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "MessageReference"
	fednow.AddError(&errs, baseName+".Ref", v.Ref.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v MessageRejectV01) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "MessageRejectV01"
	fednow.AddError(&errs, baseName+".RltdRef", v.RltdRef.Validate())
	fednow.AddError(&errs, baseName+".Rsn", v.Rsn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RejectionReason21) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RejectionReason21"
	fednow.AddError(&errs, baseName+".RjctgPtyRsn", v.RjctgPtyRsn.Validate())
	fednow.AddError(&errs, baseName+".RjctnDtTm", v.RjctnDtTm.Validate())
	if v.RsnDesc != nil {
		fednow.AddError(&errs, baseName+".RsnDesc", v.RsnDesc.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v Max350Text) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 350); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}
