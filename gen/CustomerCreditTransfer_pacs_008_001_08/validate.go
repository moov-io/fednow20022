// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08
package CustomerCreditTransfer_pacs_008_001_08

import (
	"fmt"

	"github.com/moov-io/base"
	"github.com/moov-io/fednow20022/pkg/fednow"
)

// XSD Element validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	fednow.AddError(&errs, baseName+".FIToFICstmrCdtTrf", v.FIToFICstmrCdtTrf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v AccountIdentification4Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AccountIdentification4Choice1"
	if v.IBAN != nil {
		fednow.AddError(&errs, baseName+".IBAN", v.IBAN.Validate())
	}
	if v.Othr != nil {
		fednow.AddError(&errs, baseName+".Othr", v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ActiveCurrencyAndAmountFedNow1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ActiveCurrencyAndAmountFedNow1"

	fednow.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())

	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ActiveOrHistoricCurrencyAndAmount) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ActiveOrHistoricCurrencyAndAmount"

	fednow.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())

	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AddressType3Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AddressType3Choice"
	if v.Cd != nil {
		fednow.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fednow.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification61) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification61"
	fednow.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification62) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification62"
	fednow.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAccount381) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashAccount381"
	fednow.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.Tp != nil {
		fednow.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Prxy != nil {
		fednow.AddError(&errs, baseName+".Prxy", v.Prxy.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAccountType2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashAccountType2Choice"
	if v.Cd != nil {
		fednow.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fednow.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CategoryPurpose1Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CategoryPurpose1Choice1"
	if v.Prtry != nil {
		fednow.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemIdentification2Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemIdentification2Choice1"
	if v.Cd != nil {
		fednow.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemIdentification3Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemIdentification3Choice1"
	if v.Cd != nil {
		fednow.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification21) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification21"
	fednow.AddError(&errs, baseName+".ClrSysId", v.ClrSysId.Validate())
	fednow.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Contact4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Contact4"
	if v.NmPrfx != nil {
		fednow.AddError(&errs, baseName+".NmPrfx", v.NmPrfx.Validate())
	}
	if v.Nm != nil {
		fednow.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PhneNb != nil {
		fednow.AddError(&errs, baseName+".PhneNb", v.PhneNb.Validate())
	}
	if v.MobNb != nil {
		fednow.AddError(&errs, baseName+".MobNb", v.MobNb.Validate())
	}
	if v.FaxNb != nil {
		fednow.AddError(&errs, baseName+".FaxNb", v.FaxNb.Validate())
	}
	if v.EmailAdr != nil {
		fednow.AddError(&errs, baseName+".EmailAdr", v.EmailAdr.Validate())
	}
	if v.EmailPurp != nil {
		fednow.AddError(&errs, baseName+".EmailPurp", v.EmailPurp.Validate())
	}
	if v.JobTitl != nil {
		fednow.AddError(&errs, baseName+".JobTitl", v.JobTitl.Validate())
	}
	if v.Rspnsblty != nil {
		fednow.AddError(&errs, baseName+".Rspnsblty", v.Rspnsblty.Validate())
	}
	if v.Dept != nil {
		fednow.AddError(&errs, baseName+".Dept", v.Dept.Validate())
	}
	if v.Othr != nil {
		for indx := range v.Othr {
			fednow.AddError(&errs, baseName+".Othr", v.Othr[indx].Validate())
		}
	}
	if v.PrefrdMtd != nil {
		fednow.AddError(&errs, baseName+".PrefrdMtd", v.PrefrdMtd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditTransferTransaction391) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditTransferTransaction391"
	fednow.AddError(&errs, baseName+".PmtId", v.PmtId.Validate())
	fednow.AddError(&errs, baseName+".PmtTpInf", v.PmtTpInf.Validate())
	fednow.AddError(&errs, baseName+".IntrBkSttlmAmt", v.IntrBkSttlmAmt.Validate())
	fednow.AddError(&errs, baseName+".IntrBkSttlmDt", v.IntrBkSttlmDt.Validate())
	fednow.AddError(&errs, baseName+".ChrgBr", v.ChrgBr.Validate())
	fednow.AddError(&errs, baseName+".InstgAgt", v.InstgAgt.Validate())
	fednow.AddError(&errs, baseName+".InstdAgt", v.InstdAgt.Validate())
	if v.UltmtDbtr != nil {
		fednow.AddError(&errs, baseName+".UltmtDbtr", v.UltmtDbtr.Validate())
	}
	if v.InitgPty != nil {
		fednow.AddError(&errs, baseName+".InitgPty", v.InitgPty.Validate())
	}
	fednow.AddError(&errs, baseName+".Dbtr", v.Dbtr.Validate())
	fednow.AddError(&errs, baseName+".DbtrAcct", v.DbtrAcct.Validate())
	fednow.AddError(&errs, baseName+".DbtrAgt", v.DbtrAgt.Validate())
	fednow.AddError(&errs, baseName+".CdtrAgt", v.CdtrAgt.Validate())
	fednow.AddError(&errs, baseName+".Cdtr", v.Cdtr.Validate())
	fednow.AddError(&errs, baseName+".CdtrAcct", v.CdtrAcct.Validate())
	if v.UltmtCdtr != nil {
		fednow.AddError(&errs, baseName+".UltmtCdtr", v.UltmtCdtr.Validate())
	}
	if v.Purp != nil {
		fednow.AddError(&errs, baseName+".Purp", v.Purp.Validate())
	}
	if v.RltdRmtInf != nil {
		fednow.AddError(&errs, baseName+".RltdRmtInf", v.RltdRmtInf.Validate())
	}
	if v.RmtInf != nil {
		fednow.AddError(&errs, baseName+".RmtInf", v.RmtInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditorReferenceInformation2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditorReferenceInformation2"
	if v.Tp != nil {
		fednow.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Ref != nil {
		fednow.AddError(&errs, baseName+".Ref", v.Ref.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditorReferenceType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditorReferenceType1Choice"
	if v.Cd != nil {
		fednow.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fednow.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditorReferenceType2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditorReferenceType2"
	fednow.AddError(&errs, baseName+".CdOrPrtry", v.CdOrPrtry.Validate())
	if v.Issr != nil {
		fednow.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DateAndPlaceOfBirth1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DateAndPlaceOfBirth1"
	fednow.AddError(&errs, baseName+".BirthDt", v.BirthDt.Validate())
	if v.PrvcOfBirth != nil {
		fednow.AddError(&errs, baseName+".PrvcOfBirth", v.PrvcOfBirth.Validate())
	}
	fednow.AddError(&errs, baseName+".CityOfBirth", v.CityOfBirth.Validate())
	fednow.AddError(&errs, baseName+".CtryOfBirth", v.CtryOfBirth.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DatePeriod2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DatePeriod2"
	fednow.AddError(&errs, baseName+".FrDt", v.FrDt.Validate())
	fednow.AddError(&errs, baseName+".ToDt", v.ToDt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DiscountAmountAndType1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DiscountAmountAndType1"
	if v.Tp != nil {
		fednow.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	fednow.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DiscountAmountType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DiscountAmountType1Choice"
	if v.Cd != nil {
		fednow.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fednow.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentAdjustment1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentAdjustment1"
	fednow.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if v.CdtDbtInd != nil {
		fednow.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	}
	if v.Rsn != nil {
		fednow.AddError(&errs, baseName+".Rsn", v.Rsn.Validate())
	}
	if v.AddtlInf != nil {
		fednow.AddError(&errs, baseName+".AddtlInf", v.AddtlInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentLineIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentLineIdentification1"
	if v.Tp != nil {
		fednow.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Nb != nil {
		fednow.AddError(&errs, baseName+".Nb", v.Nb.Validate())
	}
	if v.RltdDt != nil {
		fednow.AddError(&errs, baseName+".RltdDt", v.RltdDt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentLineInformation1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentLineInformation1"
	for indx := range v.Id {
		fednow.AddError(&errs, baseName+".Id", v.Id[indx].Validate())
	}
	if v.Desc != nil {
		fednow.AddError(&errs, baseName+".Desc", v.Desc.Validate())
	}
	if v.Amt != nil {
		fednow.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentLineType1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentLineType1"
	fednow.AddError(&errs, baseName+".CdOrPrtry", v.CdOrPrtry.Validate())
	if v.Issr != nil {
		fednow.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentLineType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentLineType1Choice"
	if v.Cd != nil {
		fednow.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fednow.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FIToFICustomerCreditTransferV08) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FIToFICustomerCreditTransferV08"
	fednow.AddError(&errs, baseName+".GrpHdr", v.GrpHdr.Validate())
	fednow.AddError(&errs, baseName+".CdtTrfTxInf", v.CdtTrfTxInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification181) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification181"
	fednow.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification182) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification182"
	if v.BICFI != nil {
		fednow.AddError(&errs, baseName+".BICFI", v.BICFI.Validate())
	}
	fednow.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if v.LEI != nil {
		fednow.AddError(&errs, baseName+".LEI", v.LEI.Validate())
	}
	if v.Nm != nil {
		fednow.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PstlAdr != nil {
		fednow.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Garnishment3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Garnishment3"
	fednow.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	if v.Grnshee != nil {
		fednow.AddError(&errs, baseName+".Grnshee", v.Grnshee.Validate())
	}
	if v.GrnshmtAdmstr != nil {
		fednow.AddError(&errs, baseName+".GrnshmtAdmstr", v.GrnshmtAdmstr.Validate())
	}
	if v.RefNb != nil {
		fednow.AddError(&errs, baseName+".RefNb", v.RefNb.Validate())
	}
	if v.Dt != nil {
		fednow.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	}
	if v.RmtdAmt != nil {
		fednow.AddError(&errs, baseName+".RmtdAmt", v.RmtdAmt.Validate())
	}
	if v.FmlyMdclInsrncInd != nil {
		fednow.AddError(&errs, baseName+".FmlyMdclInsrncInd", v.FmlyMdclInsrncInd.Validate())
	}
	if v.MplyeeTermntnInd != nil {
		fednow.AddError(&errs, baseName+".MplyeeTermntnInd", v.MplyeeTermntnInd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GarnishmentType1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GarnishmentType1"
	fednow.AddError(&errs, baseName+".CdOrPrtry", v.CdOrPrtry.Validate())
	if v.Issr != nil {
		fednow.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GarnishmentType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GarnishmentType1Choice"
	if v.Cd != nil {
		fednow.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fednow.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericAccountIdentification11) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericAccountIdentification11"
	fednow.AddError(&errs, baseName+".Id", v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericIdentification30) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericIdentification30"
	fednow.AddError(&errs, baseName+".Id", v.Id.Validate())
	fednow.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	if v.SchmeNm != nil {
		fednow.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericOrganisationIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericOrganisationIdentification1"
	fednow.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SchmeNm != nil {
		fednow.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if v.Issr != nil {
		fednow.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericPersonIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericPersonIdentification1"
	fednow.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SchmeNm != nil {
		fednow.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if v.Issr != nil {
		fednow.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GroupHeader931) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GroupHeader931"
	fednow.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	fednow.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	fednow.AddError(&errs, baseName+".NbOfTxs", v.NbOfTxs.Validate())
	fednow.AddError(&errs, baseName+".SttlmInf", v.SttlmInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v LocalInstrument2Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "LocalInstrument2Choice1"
	if v.Prtry != nil {
		fednow.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v NameAndAddress161) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "NameAndAddress161"
	fednow.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	fednow.AddError(&errs, baseName+".Adr", v.Adr.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrganisationIdentification29) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OrganisationIdentification29"
	if v.AnyBIC != nil {
		fednow.AddError(&errs, baseName+".AnyBIC", v.AnyBIC.Validate())
	}
	if v.LEI != nil {
		fednow.AddError(&errs, baseName+".LEI", v.LEI.Validate())
	}
	if v.Othr != nil {
		for indx := range v.Othr {
			fednow.AddError(&errs, baseName+".Othr", v.Othr[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrganisationIdentification291) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OrganisationIdentification291"
	if v.AnyBIC != nil {
		fednow.AddError(&errs, baseName+".AnyBIC", v.AnyBIC.Validate())
	}
	if v.LEI != nil {
		fednow.AddError(&errs, baseName+".LEI", v.LEI.Validate())
	}
	if v.Othr != nil {
		fednow.AddError(&errs, baseName+".Othr", v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrganisationIdentificationSchemeName1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OrganisationIdentificationSchemeName1Choice"
	if v.Cd != nil {
		fednow.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fednow.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OtherContact1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OtherContact1"
	fednow.AddError(&errs, baseName+".ChanlTp", v.ChanlTp.Validate())
	if v.Id != nil {
		fednow.AddError(&errs, baseName+".Id", v.Id.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party38Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party38Choice"
	if v.OrgId != nil {
		fednow.AddError(&errs, baseName+".OrgId", v.OrgId.Validate())
	}
	if v.PrvtId != nil {
		fednow.AddError(&errs, baseName+".PrvtId", v.PrvtId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party38Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party38Choice1"
	if v.OrgId != nil {
		fednow.AddError(&errs, baseName+".OrgId", v.OrgId.Validate())
	}
	if v.PrvtId != nil {
		fednow.AddError(&errs, baseName+".PrvtId", v.PrvtId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification135) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PartyIdentification135"
	if v.Nm != nil {
		fednow.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PstlAdr != nil {
		fednow.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if v.Id != nil {
		fednow.AddError(&errs, baseName+".Id", v.Id.Validate())
	}
	if v.CtryOfRes != nil {
		fednow.AddError(&errs, baseName+".CtryOfRes", v.CtryOfRes.Validate())
	}
	if v.CtctDtls != nil {
		fednow.AddError(&errs, baseName+".CtctDtls", v.CtctDtls.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification1351) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PartyIdentification1351"
	fednow.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	if v.PstlAdr != nil {
		fednow.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if v.Id != nil {
		fednow.AddError(&errs, baseName+".Id", v.Id.Validate())
	}
	if v.CtryOfRes != nil {
		fednow.AddError(&errs, baseName+".CtryOfRes", v.CtryOfRes.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentIdentification71) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentIdentification71"
	if v.InstrId != nil {
		fednow.AddError(&errs, baseName+".InstrId", v.InstrId.Validate())
	}
	fednow.AddError(&errs, baseName+".EndToEndId", v.EndToEndId.Validate())
	if v.TxId != nil {
		fednow.AddError(&errs, baseName+".TxId", v.TxId.Validate())
	}
	if v.UETR != nil {
		fednow.AddError(&errs, baseName+".UETR", v.UETR.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentTypeInformation281) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentTypeInformation281"
	if v.SvcLvl != nil {
		fednow.AddError(&errs, baseName+".SvcLvl", v.SvcLvl.Validate())
	}
	fednow.AddError(&errs, baseName+".LclInstrm", v.LclInstrm.Validate())
	fednow.AddError(&errs, baseName+".CtgyPurp", v.CtgyPurp.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PersonIdentification13) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PersonIdentification13"
	if v.DtAndPlcOfBirth != nil {
		fednow.AddError(&errs, baseName+".DtAndPlcOfBirth", v.DtAndPlcOfBirth.Validate())
	}
	if v.Othr != nil {
		for indx := range v.Othr {
			fednow.AddError(&errs, baseName+".Othr", v.Othr[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PersonIdentification131) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PersonIdentification131"
	if v.DtAndPlcOfBirth != nil {
		fednow.AddError(&errs, baseName+".DtAndPlcOfBirth", v.DtAndPlcOfBirth.Validate())
	}
	if v.Othr != nil {
		fednow.AddError(&errs, baseName+".Othr", v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PersonIdentificationSchemeName1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PersonIdentificationSchemeName1Choice"
	if v.Cd != nil {
		fednow.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fednow.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PostalAddress24) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PostalAddress24"
	if v.AdrTp != nil {
		fednow.AddError(&errs, baseName+".AdrTp", v.AdrTp.Validate())
	}
	if v.Dept != nil {
		fednow.AddError(&errs, baseName+".Dept", v.Dept.Validate())
	}
	if v.SubDept != nil {
		fednow.AddError(&errs, baseName+".SubDept", v.SubDept.Validate())
	}
	if v.StrtNm != nil {
		fednow.AddError(&errs, baseName+".StrtNm", v.StrtNm.Validate())
	}
	if v.BldgNb != nil {
		fednow.AddError(&errs, baseName+".BldgNb", v.BldgNb.Validate())
	}
	if v.BldgNm != nil {
		fednow.AddError(&errs, baseName+".BldgNm", v.BldgNm.Validate())
	}
	if v.Flr != nil {
		fednow.AddError(&errs, baseName+".Flr", v.Flr.Validate())
	}
	if v.PstBx != nil {
		fednow.AddError(&errs, baseName+".PstBx", v.PstBx.Validate())
	}
	if v.Room != nil {
		fednow.AddError(&errs, baseName+".Room", v.Room.Validate())
	}
	if v.PstCd != nil {
		fednow.AddError(&errs, baseName+".PstCd", v.PstCd.Validate())
	}
	if v.TwnNm != nil {
		fednow.AddError(&errs, baseName+".TwnNm", v.TwnNm.Validate())
	}
	if v.TwnLctnNm != nil {
		fednow.AddError(&errs, baseName+".TwnLctnNm", v.TwnLctnNm.Validate())
	}
	if v.DstrctNm != nil {
		fednow.AddError(&errs, baseName+".DstrctNm", v.DstrctNm.Validate())
	}
	if v.CtrySubDvsn != nil {
		fednow.AddError(&errs, baseName+".CtrySubDvsn", v.CtrySubDvsn.Validate())
	}
	if v.Ctry != nil {
		fednow.AddError(&errs, baseName+".Ctry", v.Ctry.Validate())
	}
	if v.AdrLine != nil {
		for indx := range v.AdrLine {
			fednow.AddError(&errs, baseName+".AdrLine", v.AdrLine[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PostalAddress241) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PostalAddress241"
	if v.Dept != nil {
		fednow.AddError(&errs, baseName+".Dept", v.Dept.Validate())
	}
	if v.SubDept != nil {
		fednow.AddError(&errs, baseName+".SubDept", v.SubDept.Validate())
	}
	if v.StrtNm != nil {
		fednow.AddError(&errs, baseName+".StrtNm", v.StrtNm.Validate())
	}
	if v.BldgNb != nil {
		fednow.AddError(&errs, baseName+".BldgNb", v.BldgNb.Validate())
	}
	if v.BldgNm != nil {
		fednow.AddError(&errs, baseName+".BldgNm", v.BldgNm.Validate())
	}
	if v.Flr != nil {
		fednow.AddError(&errs, baseName+".Flr", v.Flr.Validate())
	}
	if v.PstBx != nil {
		fednow.AddError(&errs, baseName+".PstBx", v.PstBx.Validate())
	}
	if v.Room != nil {
		fednow.AddError(&errs, baseName+".Room", v.Room.Validate())
	}
	fednow.AddError(&errs, baseName+".PstCd", v.PstCd.Validate())
	fednow.AddError(&errs, baseName+".TwnNm", v.TwnNm.Validate())
	if v.TwnLctnNm != nil {
		fednow.AddError(&errs, baseName+".TwnLctnNm", v.TwnLctnNm.Validate())
	}
	if v.DstrctNm != nil {
		fednow.AddError(&errs, baseName+".DstrctNm", v.DstrctNm.Validate())
	}
	fednow.AddError(&errs, baseName+".CtrySubDvsn", v.CtrySubDvsn.Validate())
	fednow.AddError(&errs, baseName+".Ctry", v.Ctry.Validate())
	if v.AdrLine != nil {
		fednow.AddError(&errs, baseName+".AdrLine", v.AdrLine.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProxyAccountIdentification11) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProxyAccountIdentification11"
	if v.Tp != nil {
		fednow.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	fednow.AddError(&errs, baseName+".Id", v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProxyAccountType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProxyAccountType1Choice"
	if v.Cd != nil {
		fednow.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fednow.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Purpose2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Purpose2Choice"
	if v.Cd != nil {
		fednow.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fednow.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReferredDocumentInformation7) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReferredDocumentInformation7"
	if v.Tp != nil {
		fednow.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Nb != nil {
		fednow.AddError(&errs, baseName+".Nb", v.Nb.Validate())
	}
	if v.RltdDt != nil {
		fednow.AddError(&errs, baseName+".RltdDt", v.RltdDt.Validate())
	}
	if v.LineDtls != nil {
		for indx := range v.LineDtls {
			fednow.AddError(&errs, baseName+".LineDtls", v.LineDtls[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReferredDocumentType3Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReferredDocumentType3Choice"
	if v.Cd != nil {
		fednow.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fednow.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReferredDocumentType4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReferredDocumentType4"
	fednow.AddError(&errs, baseName+".CdOrPrtry", v.CdOrPrtry.Validate())
	if v.Issr != nil {
		fednow.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceAmount2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceAmount2"
	if v.DuePyblAmt != nil {
		fednow.AddError(&errs, baseName+".DuePyblAmt", v.DuePyblAmt.Validate())
	}
	if v.DscntApldAmt != nil {
		for indx := range v.DscntApldAmt {
			fednow.AddError(&errs, baseName+".DscntApldAmt", v.DscntApldAmt[indx].Validate())
		}
	}
	if v.CdtNoteAmt != nil {
		fednow.AddError(&errs, baseName+".CdtNoteAmt", v.CdtNoteAmt.Validate())
	}
	if v.TaxAmt != nil {
		for indx := range v.TaxAmt {
			fednow.AddError(&errs, baseName+".TaxAmt", v.TaxAmt[indx].Validate())
		}
	}
	if v.AdjstmntAmtAndRsn != nil {
		for indx := range v.AdjstmntAmtAndRsn {
			fednow.AddError(&errs, baseName+".AdjstmntAmtAndRsn", v.AdjstmntAmtAndRsn[indx].Validate())
		}
	}
	if v.RmtdAmt != nil {
		fednow.AddError(&errs, baseName+".RmtdAmt", v.RmtdAmt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceAmount3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceAmount3"
	if v.DuePyblAmt != nil {
		fednow.AddError(&errs, baseName+".DuePyblAmt", v.DuePyblAmt.Validate())
	}
	if v.DscntApldAmt != nil {
		for indx := range v.DscntApldAmt {
			fednow.AddError(&errs, baseName+".DscntApldAmt", v.DscntApldAmt[indx].Validate())
		}
	}
	if v.CdtNoteAmt != nil {
		fednow.AddError(&errs, baseName+".CdtNoteAmt", v.CdtNoteAmt.Validate())
	}
	if v.TaxAmt != nil {
		for indx := range v.TaxAmt {
			fednow.AddError(&errs, baseName+".TaxAmt", v.TaxAmt[indx].Validate())
		}
	}
	if v.AdjstmntAmtAndRsn != nil {
		for indx := range v.AdjstmntAmtAndRsn {
			fednow.AddError(&errs, baseName+".AdjstmntAmtAndRsn", v.AdjstmntAmtAndRsn[indx].Validate())
		}
	}
	if v.RmtdAmt != nil {
		fednow.AddError(&errs, baseName+".RmtdAmt", v.RmtdAmt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceInformation161) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceInformation161"
	if v.Ustrd != nil {
		fednow.AddError(&errs, baseName+".Ustrd", v.Ustrd.Validate())
	}
	if v.Strd != nil {
		for indx := range v.Strd {
			fednow.AddError(&errs, baseName+".Strd", v.Strd[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceLocation71) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceLocation71"
	if v.RmtId != nil {
		fednow.AddError(&errs, baseName+".RmtId", v.RmtId.Validate())
	}
	if v.RmtLctnDtls != nil {
		for indx := range v.RmtLctnDtls {
			fednow.AddError(&errs, baseName+".RmtLctnDtls", v.RmtLctnDtls[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceLocationData11) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceLocationData11"
	fednow.AddError(&errs, baseName+".Mtd", v.Mtd.Validate())
	if v.ElctrncAdr != nil {
		fednow.AddError(&errs, baseName+".ElctrncAdr", v.ElctrncAdr.Validate())
	}
	if v.PstlAdr != nil {
		fednow.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ServiceLevel8Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ServiceLevel8Choice"
	if v.Cd != nil {
		fednow.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fednow.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SettlementInstruction71) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SettlementInstruction71"
	fednow.AddError(&errs, baseName+".SttlmMtd", v.SttlmMtd.Validate())
	fednow.AddError(&errs, baseName+".ClrSys", v.ClrSys.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v StructuredRemittanceInformation16) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "StructuredRemittanceInformation16"
	if v.RfrdDocInf != nil {
		for indx := range v.RfrdDocInf {
			fednow.AddError(&errs, baseName+".RfrdDocInf", v.RfrdDocInf[indx].Validate())
		}
	}
	if v.RfrdDocAmt != nil {
		fednow.AddError(&errs, baseName+".RfrdDocAmt", v.RfrdDocAmt.Validate())
	}
	if v.CdtrRefInf != nil {
		fednow.AddError(&errs, baseName+".CdtrRefInf", v.CdtrRefInf.Validate())
	}
	if v.Invcr != nil {
		fednow.AddError(&errs, baseName+".Invcr", v.Invcr.Validate())
	}
	if v.Invcee != nil {
		fednow.AddError(&errs, baseName+".Invcee", v.Invcee.Validate())
	}
	if v.TaxRmt != nil {
		fednow.AddError(&errs, baseName+".TaxRmt", v.TaxRmt.Validate())
	}
	if v.GrnshmtRmt != nil {
		fednow.AddError(&errs, baseName+".GrnshmtRmt", v.GrnshmtRmt.Validate())
	}
	if v.AddtlRmtInf != nil {
		for indx := range v.AddtlRmtInf {
			fednow.AddError(&errs, baseName+".AddtlRmtInf", v.AddtlRmtInf[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxAmount2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxAmount2"
	if v.Rate != nil {
		fednow.AddError(&errs, baseName+".Rate", v.Rate.Validate())
	}
	if v.TaxblBaseAmt != nil {
		fednow.AddError(&errs, baseName+".TaxblBaseAmt", v.TaxblBaseAmt.Validate())
	}
	if v.TtlAmt != nil {
		fednow.AddError(&errs, baseName+".TtlAmt", v.TtlAmt.Validate())
	}
	if v.Dtls != nil {
		for indx := range v.Dtls {
			fednow.AddError(&errs, baseName+".Dtls", v.Dtls[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxAmountAndType1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxAmountAndType1"
	if v.Tp != nil {
		fednow.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	fednow.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxAmountType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxAmountType1Choice"
	if v.Cd != nil {
		fednow.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fednow.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxAuthorisation1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxAuthorisation1"
	if v.Titl != nil {
		fednow.AddError(&errs, baseName+".Titl", v.Titl.Validate())
	}
	if v.Nm != nil {
		fednow.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxInformation7) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxInformation7"
	if v.Cdtr != nil {
		fednow.AddError(&errs, baseName+".Cdtr", v.Cdtr.Validate())
	}
	if v.Dbtr != nil {
		fednow.AddError(&errs, baseName+".Dbtr", v.Dbtr.Validate())
	}
	if v.UltmtDbtr != nil {
		fednow.AddError(&errs, baseName+".UltmtDbtr", v.UltmtDbtr.Validate())
	}
	if v.AdmstnZone != nil {
		fednow.AddError(&errs, baseName+".AdmstnZone", v.AdmstnZone.Validate())
	}
	if v.RefNb != nil {
		fednow.AddError(&errs, baseName+".RefNb", v.RefNb.Validate())
	}
	if v.Mtd != nil {
		fednow.AddError(&errs, baseName+".Mtd", v.Mtd.Validate())
	}
	if v.TtlTaxblBaseAmt != nil {
		fednow.AddError(&errs, baseName+".TtlTaxblBaseAmt", v.TtlTaxblBaseAmt.Validate())
	}
	if v.TtlTaxAmt != nil {
		fednow.AddError(&errs, baseName+".TtlTaxAmt", v.TtlTaxAmt.Validate())
	}
	if v.Dt != nil {
		fednow.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	}
	if v.SeqNb != nil {
		fednow.AddError(&errs, baseName+".SeqNb", v.SeqNb.Validate())
	}
	if v.Rcrd != nil {
		for indx := range v.Rcrd {
			fednow.AddError(&errs, baseName+".Rcrd", v.Rcrd[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxParty1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxParty1"
	if v.TaxId != nil {
		fednow.AddError(&errs, baseName+".TaxId", v.TaxId.Validate())
	}
	if v.RegnId != nil {
		fednow.AddError(&errs, baseName+".RegnId", v.RegnId.Validate())
	}
	if v.TaxTp != nil {
		fednow.AddError(&errs, baseName+".TaxTp", v.TaxTp.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxParty2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxParty2"
	if v.TaxId != nil {
		fednow.AddError(&errs, baseName+".TaxId", v.TaxId.Validate())
	}
	if v.RegnId != nil {
		fednow.AddError(&errs, baseName+".RegnId", v.RegnId.Validate())
	}
	if v.TaxTp != nil {
		fednow.AddError(&errs, baseName+".TaxTp", v.TaxTp.Validate())
	}
	if v.Authstn != nil {
		fednow.AddError(&errs, baseName+".Authstn", v.Authstn.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxPeriod2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxPeriod2"
	if v.Yr != nil {
		fednow.AddError(&errs, baseName+".Yr", v.Yr.Validate())
	}
	if v.Tp != nil {
		fednow.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.FrToDt != nil {
		fednow.AddError(&errs, baseName+".FrToDt", v.FrToDt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxRecord2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxRecord2"
	if v.Tp != nil {
		fednow.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Ctgy != nil {
		fednow.AddError(&errs, baseName+".Ctgy", v.Ctgy.Validate())
	}
	if v.CtgyDtls != nil {
		fednow.AddError(&errs, baseName+".CtgyDtls", v.CtgyDtls.Validate())
	}
	if v.DbtrSts != nil {
		fednow.AddError(&errs, baseName+".DbtrSts", v.DbtrSts.Validate())
	}
	if v.CertId != nil {
		fednow.AddError(&errs, baseName+".CertId", v.CertId.Validate())
	}
	if v.FrmsCd != nil {
		fednow.AddError(&errs, baseName+".FrmsCd", v.FrmsCd.Validate())
	}
	if v.Prd != nil {
		fednow.AddError(&errs, baseName+".Prd", v.Prd.Validate())
	}
	if v.TaxAmt != nil {
		fednow.AddError(&errs, baseName+".TaxAmt", v.TaxAmt.Validate())
	}
	if v.AddtlInf != nil {
		fednow.AddError(&errs, baseName+".AddtlInf", v.AddtlInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxRecordDetails2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxRecordDetails2"
	if v.Prd != nil {
		fednow.AddError(&errs, baseName+".Prd", v.Prd.Validate())
	}
	fednow.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v ActiveCurrencyAndAmountFedNow1SimpleType) Validate() error {
	if err := fednow.ValidateMinInclusive(float64(v), 0); err != nil {
		return err
	}
	if err := fednow.ValidateFractionDigits(fmt.Sprintf("%v", v), 2); err != nil {
		return err
	}
	if err := fednow.ValidateTotalDigits(fmt.Sprintf("%v", v), 14); err != nil {
		return err
	}
	return nil
}

func (v ActiveCurrencyCodeFixed) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "USD"); err != nil {
		return err
	}
	return nil
}

func (v ActiveOrHistoricCurrencyCode) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[A-Z]{3,3}`); err != nil {
		return err
	}
	return nil
}

func (v AddressType2Code) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "ADDR", "PBOX", "HOME", "BIZZ", "MLTO", "DLVY"); err != nil {
		return err
	}
	return nil
}

func (v AnyBICDec2014Identifier) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}`); err != nil {
		return err
	}
	return nil
}

func (v BICFIDec2014Identifier) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}`); err != nil {
		return err
	}
	return nil
}

func (v ChargeBearerType1Code1) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "SLEV"); err != nil {
		return err
	}
	return nil
}

func (v CountryCode) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[A-Z]{2,2}`); err != nil {
		return err
	}
	return nil
}

func (v CreditDebitCode) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "CRDT", "DBIT"); err != nil {
		return err
	}
	return nil
}

func (v DocumentType3Code) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "RADM", "RPIN", "FXDR", "DISP", "PUOR", "SCOR"); err != nil {
		return err
	}
	return nil
}

func (v DocumentType6Code) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "MSIN", "CNFA", "DNFA", "CINV", "CREN", "DEBN", "HIRI", "SBIN", "CMCN", "SOAC", "DISP", "BOLD", "VCHR", "AROI", "TSUT", "PUOR"); err != nil {
		return err
	}
	return nil
}

func (v Exact4AlphaNumericText) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[a-zA-Z0-9]{4}`); err != nil {
		return err
	}
	return nil
}

func (v ExternalCashAccountType1Code) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalCashClearingSystem1CodeFixed) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "FDN"); err != nil {
		return err
	}
	return nil
}

func (v ExternalClearingSystemIdentification1CodeFixed) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "USABA"); err != nil {
		return err
	}
	return nil
}

func (v ExternalDiscountAmountType1Code) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalDocumentLineType1Code) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalGarnishmentType1Code) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalOrganisationIdentification1Code) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalPersonIdentification1Code) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalProxyAccountType1Code) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalPurpose1Code) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalServiceLevel1Code) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalTaxAmountType1Code) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v IBAN2007Identifier) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}`); err != nil {
		return err
	}
	return nil
}

func (v LEIIdentifier) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[A-Z0-9]{18,18}[0-9]{2,2}`); err != nil {
		return err
	}
	return nil
}

func (v Max128Text) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 128); err != nil {
		return err
	}
	return nil
}

func (v Max140Text) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 140); err != nil {
		return err
	}
	return nil
}

func (v Max15NumericTextFixed) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "1"); err != nil {
		return err
	}
	return nil
}

func (v Max16Text) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 16); err != nil {
		return err
	}
	return nil
}

func (v Max2048Text) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 2048); err != nil {
		return err
	}
	return nil
}

func (v Max256Text) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 256); err != nil {
		return err
	}
	return nil
}

func (v Max34Text) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 34); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max4Text) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v Max70Text) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 70); err != nil {
		return err
	}
	return nil
}

func (v MessageIdentificationFedNow1) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[0-9]{8,8}[a-zA-Z0-9]{9,9}[a-zA-Z0-9]{1,18}`); err != nil {
		return err
	}
	if err := fednow.ValidateMinLength(string(v), 18); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v NamePrefix2Code) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "DOCT", "MADM", "MISS", "MIST", "MIKS"); err != nil {
		return err
	}
	return nil
}

func (v Number) Validate() error {
	if err := fednow.ValidateFractionDigits(fmt.Sprintf("%v", v), 0); err != nil {
		return err
	}
	if err := fednow.ValidateTotalDigits(fmt.Sprintf("%v", v), 18); err != nil {
		return err
	}
	return nil
}

func (v PercentageRate) Validate() error {
	if err := fednow.ValidateFractionDigits(fmt.Sprintf("%v", v), 10); err != nil {
		return err
	}
	if err := fednow.ValidateTotalDigits(fmt.Sprintf("%v", v), 11); err != nil {
		return err
	}
	return nil
}

func (v PhoneNumber) Validate() error {
	if err := fednow.ValidatePattern(string(v), `\+[0-9]{1,3}-[0-9()+\-]{1,30}`); err != nil {
		return err
	}
	return nil
}

func (v PreferredContactMethod1Code) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "LETT", "MAIL", "PHON", "FAXX", "CELL"); err != nil {
		return err
	}
	return nil
}

func (v RemittanceLocationMethod2Code) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "FAXI", "EDIC", "URID", "EMAL", "POST", "SMSM"); err != nil {
		return err
	}
	return nil
}

func (v RoutingNumberFRS1) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[0-9]{9,9}`); err != nil {
		return err
	}
	return nil
}

func (v SettlementMethod1Code1) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "CLRG"); err != nil {
		return err
	}
	return nil
}

func (v TaxRecordPeriod1Code) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "MM01", "MM02", "MM03", "MM04", "MM05", "MM06", "MM07", "MM08", "MM09", "MM10", "MM11", "MM12", "QTR1", "QTR2", "QTR3", "QTR4", "HLF1", "HLF2"); err != nil {
		return err
	}
	return nil
}

func (v TrueFalseIndicator) Validate() error {
	return nil
}

func (v UUIDv4Identifier) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}`); err != nil {
		return err
	}
	return nil
}
