// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:camt.052.001.08
package AccountActivityTotalsReport_camt_052_001_08

import (
	"fmt"

	"github.com/moov-io/base"
	"github.com/moov-io/fednow20022/pkg/fednow"
)

// XSD Element validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	fednow.AddError(&errs, baseName+".BkToCstmrAcctRpt", v.BkToCstmrAcctRpt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v AccountIdentification4Choice1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AccountIdentification4Choice1"
	if v.Othr != nil {
		fednow.AddError(&errs, baseName+".Othr", v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AccountReport251) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AccountReport251"
	fednow.AddError(&errs, baseName+".Id", v.Id.Validate())
	fednow.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	fednow.AddError(&errs, baseName+".Acct", v.Acct.Validate())
	if v.RltdAcct != nil {
		fednow.AddError(&errs, baseName+".RltdAcct", v.RltdAcct.Validate())
	}
	fednow.AddError(&errs, baseName+".TxsSummry", v.TxsSummry.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BankToCustomerAccountReportV08) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BankToCustomerAccountReportV08"
	fednow.AddError(&errs, baseName+".GrpHdr", v.GrpHdr.Validate())
	for indx := range v.Rpt {
		fednow.AddError(&errs, baseName+".Rpt", v.Rpt[indx].Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BankTransactionCodeStructure41) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BankTransactionCodeStructure41"
	fednow.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAccount381) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashAccount381"
	fednow.AddError(&errs, baseName+".Id", v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAccount391) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashAccount391"
	fednow.AddError(&errs, baseName+".Id", v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericAccountIdentification11) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericAccountIdentification11"
	fednow.AddError(&errs, baseName+".Id", v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GroupHeader811) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GroupHeader811"
	fednow.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	fednow.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	fednow.AddError(&errs, baseName+".MsgPgntn", v.MsgPgntn.Validate())
	if v.OrgnlBizQry != nil {
		fednow.AddError(&errs, baseName+".OrgnlBizQry", v.OrgnlBizQry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v NumberAndSumOfTransactions11) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "NumberAndSumOfTransactions11"
	fednow.AddError(&errs, baseName+".NbOfNtries", v.NbOfNtries.Validate())
	fednow.AddError(&errs, baseName+".Sum", v.Sum.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OriginalBusinessQuery11) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OriginalBusinessQuery11"
	fednow.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	if v.MsgNmId != nil {
		fednow.AddError(&errs, baseName+".MsgNmId", v.MsgNmId.Validate())
	}
	fednow.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Pagination1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Pagination1"
	fednow.AddError(&errs, baseName+".PgNb", v.PgNb.Validate())
	fednow.AddError(&errs, baseName+".LastPgInd", v.LastPgInd.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryBankTransactionCodeStructure11) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProprietaryBankTransactionCodeStructure11"
	fednow.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TotalTransactions61) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TotalTransactions61"
	fednow.AddError(&errs, baseName+".TtlCdtNtries", v.TtlCdtNtries.Validate())
	fednow.AddError(&errs, baseName+".TtlDbtNtries", v.TtlDbtNtries.Validate())
	if v.TtlNtriesPerBkTxCd != nil {
		for indx := range v.TtlNtriesPerBkTxCd {
			fednow.AddError(&errs, baseName+".TtlNtriesPerBkTxCd", v.TtlNtriesPerBkTxCd[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TotalsPerBankTransactionCode51) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TotalsPerBankTransactionCode51"
	fednow.AddError(&errs, baseName+".NbOfNtries", v.NbOfNtries.Validate())
	fednow.AddError(&errs, baseName+".BkTxCd", v.BkTxCd.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v AccountReportingFedNow1) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "AATR", "CATR", "IATR", "CITR"); err != nil {
		return err
	}
	return nil
}

func (v BankTransactionCodeFedNow1) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "SENT", "RCVD", "RJTS", "RJTR"); err != nil {
		return err
	}
	return nil
}

func (v DecimalNumber) Validate() error {
	if err := fednow.ValidateFractionDigits(fmt.Sprintf("%v", v), 17); err != nil {
		return err
	}
	if err := fednow.ValidateTotalDigits(fmt.Sprintf("%v", v), 18); err != nil {
		return err
	}
	return nil
}

func (v Max15NumericText) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[0-9]{1,15}`); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := fednow.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fednow.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max5NumericText) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[0-9]{1,5}`); err != nil {
		return err
	}
	return nil
}

func (v MessageNameIdentificationFRS1) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[a-z]{4,4}[.]{1,1}[0-9]{3,3}[.]{1,1}001[.]{1,1}[0-9]{2,2}`); err != nil {
		return err
	}
	if err := fednow.ValidateLength(string(v), 15); err != nil {
		return err
	}
	return nil
}

func (v ReportTimingFRS1) Validate() error {
	if err := fednow.ValidateEnumeration(string(v), "EDAY", "IDAY"); err != nil {
		return err
	}
	return nil
}

func (v RoutingNumberFRS1) Validate() error {
	if err := fednow.ValidatePattern(string(v), `[0-9]{9,9}`); err != nil {
		return err
	}
	return nil
}

func (v YesNoIndicator) Validate() error {
	return nil
}
